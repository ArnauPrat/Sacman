CMAKE_MINIMUM_REQUIRED( VERSION 2.8.3 )
PROJECT( sacman )

#detecting platform and setting variables
IF( UNIX )
    SET(CMAKE_CXX_FLAGS_DEBUG "-O0 --std=c++11 -g -pg -Wall -Wno-strict-aliasing")	
	SET(CMAKE_CXX_FLAGS_RELEASE "-O3 --std=c++11 -DNDEBUG -Wall -Wno-strict-aliasing")
	IF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4)
        MESSAGE( FATAL_ERROR "Linux32 is Unsupported" )
	ENDIF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4)
    FOREACH( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        STRING( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
        SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR} )
        SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR} )
        SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR} )
    ENDFOREACH( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
	SET(PLATFORM "linux64" )
ENDIF( UNIX )

IF( WIN32 )
	SET(CMAKE_CXX_FLAGS_DEBUG "/Od /openmp /W3 /Zi")	
	SET(CMAKE_CXX_FLAGS_RELEASE "/O2 /openmp /Oi /Ot /W3")	
	IF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4)
		MESSAGE( FATAL_ERROR "Win32 is Unsupported" )
	ENDIF( ${CMAKE_SIZEOF_VOID_P} EQUAL 4)
	SET( PLATFORM "win64" )
    IF( MSVC )
        FOREACH( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
            STRING( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
            SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR} )
            SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR} )
            SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_BINARY_DIR} )
        ENDFOREACH( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
    ENDIF( MSVC )
ENDIF( WIN32 )

#SET( CMAKE_VERBOSE_MAKEFILE TRUE)
IF( NOT PLATFORM )
	MESSAGE(FATAL_ERROR "Unable to detect platform")
ENDIF( NOT PLATFORM )

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})


#DEFINITIONS
ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS)

SET(LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib")
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/modules")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release)
endif()


ADD_SUBDIRECTORY( ${CMAKE_CURRENT_SOURCE_DIR}/src/arnitech )


#library directories
INCLUDE_DIRECTORIES( ./src )
INCLUDE_DIRECTORIES( ${ARNITECH_INCLUDE_DIRS} )


SET( SOURCE_FILES 
        ${LIB_DIR}/jsoncpp/jsoncpp.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Background.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Background.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Character.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Character.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Occluder.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Occluder.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Portal.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Portal.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Level.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/objects/Level.hpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/objects/LoadLevel.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/src/objects/LoadLevel.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp
 )

LINK_DIRECTORIES( ${ARNITECH_LIB_DIRS} )

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})	
TARGET_LINK_LIBRARIES(${PROJECT_NAME} arnitech)

